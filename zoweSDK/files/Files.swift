//
//  Files.swift
//  Zowe SDK
//
//  This program and the accompanying materials are made available under the terms of the
//  Eclipse Public License v2.0 which accompanies this distribution, and is available at
//  https://www.eclipse.org/legal/epl-v20.html
//  SPDX-License-Identifier: EPL-2.0
//
//  Copyright Â© 2020 Contributors to the Zowe Project. All rights reserved.
//

import Foundation

/// z/OSMF Data Sets API class
/// - See Also: [z/OS data set and file REST interface](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_RESTFILES.htm)
public class Files: ZosmfApi {
    
    /// Files object constructor
    /// - Parameter connection: z/OSMF API connection object (generated by the ZoweSDK object)
    internal init(
        _ connection: ZosmfConnection
    ) {
        super.init(connection, "/zosmf/restfiles/")
    }
    
    /// Enumerated type that describes the different kinds of data sets that can be created (only partitioned and sequential ones are currently supported)
    public enum DatasetType {
        case partitioned, sequential
        
        /// Specifies all the default attributes to create non-vsam data sets (only partitioned and sequential ones are currently supported)
        /// - Returns: Default attributes to be used as options for the different types of data sets that can be created
        func defaultAttributes() -> [String: Any] {
            switch self {
            case .partitioned:
                return [
                    "alcunit": "CYL",
                    "dsorg": "PO",
                    "primary": 1,
                    "dirblk": 5,
                    "recfm": "FB",
                    "blksize": 6160,
                    "lrecl": 80
                ]
            case .sequential:
                return [
                    "alcunit": "CYL",
                    "dsorg": "PS",
                    "primary": 1,
                    "recfm": "FB",
                    "blksize": 6160,
                    "lrecl": 80
                ]
            }
        }
    }
    
    /// Launches request to create sequential or partitioned data sets on a z/OS system with the following HTTP method and URI path: POST /zosmf/restfiles/ds/<dataset_name>
    /// - Parameters:
    ///   - datasetName: The name of a z/OS data set to create. The length of the data set name cannot exceed 44 characters.
    ///   - datasetType: The data set type describing the necessary kind of data set to be created
    ///   - datasetAttributes: Optional parameter for the attributes to be used as options for the data sets to be created. If omitted, the default attributes for a given data set are used.
    ///   - onCompletion: Closure with a JSON response from z/OS system with the result of the operation. If an error occurs, the response message contains its description.
    ///   - response: The JSON response from z/OS system with the result of the operation or an error description.
    /// - Important: [Data set naming rules](https://www.ibm.com/support/knowledgecenter/en/SSLTBW_2.1.0/com.ibm.zos.v2r1.ikjp100/ikjp10056.htm):
    ///   1. A data set name consists of one or more parts connected by periods. Each part is called a qualifier
    ///   2. Each qualifier must begin with an alphabetic character (A to Z) or the special character @, #, or $
    ///   3. The remaining characters in each qualifier can be alphabetic, special, or numeric (0 to 9) characters
    ///   4. Each qualifier must be 1 to 8 characters in length
    ///   5. The maximum length of a complete data set name before specifying a member name is 44 characters, including the periods
    /// - See Also: [Create a sequential and partitioned data set](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_CreateDataSet.htm)
    public func createDsn(
        datasetName: String,
        datasetType: DatasetType,
        datasetAttributes: [String: Any]? = nil,
        onCompletion: @escaping (_ response: String) -> Void
    ) {
        var customArgs = requestArguments
        customArgs.url = prepareUrl(path: "ds/" + datasetName)
        customArgs.body = datasetAttributes ?? datasetType.defaultAttributes()
        
        requestHandler.performRequest(.POST, customArgs, onCompletion: { response in
            onCompletion(response)
        })
    }
    
    /// Launches request to retrieve a list of data sets based on the given pattern with the following HTTP method and URI path: GET /zosmf/restfiles/ds?dslevel=<dataset_name_pattern>
    /// - Parameters:
    ///   - namePattern: The name pattern for a list of data sets.
    ///   - listAttributes: Boolean value for all of the basic attributes for the data set being queried. These attributes are commonly found in the ISPF List Data set panel.. If you omit this parameter, it is set to false by default.
    ///   - onCompletion: Closure with a JSON response from z/OS system with a list of data set names matching the given pattern. If an error occurs, the response message contains its description.
    ///   - response: The JSON response from z/OS system with the result of the operation or an error description.
    /// - See Also: [List the z/OS data sets on a system](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_GetListDataSets.htm)
    public func listDsn(
        namePattern: String,
        listAttributes: Bool = false,
        onCompletion: @escaping (_ response: String) -> Void
    ) {
        var customArgs = requestArguments
        let queryItem = URLQueryItem(name: "dslevel", value: namePattern)
        customArgs.url = prepareUrl(path: "ds", queryItems: [queryItem])
        if listAttributes == true {
            customArgs.headers["X-IBM-Attributes"] = "base"
        }
        
        requestHandler.performRequest(.GET, customArgs) { response in
            onCompletion(response)
        }
    }
    
    /// Launches request to retrieve a list of data set members on the given partitioned data set (PDS or PDSE) with the following HTTP method and URI path: GET /zosmf/restfiles/ds/<dataset_name>/member
    /// - Parameters:
    ///   - datasetName: The name of a z/OS data set for which members are to be listed. The length of the data set name cannot exceed 44 characters.
    ///   - onCompletion: Closure with a JSON response from z/OS system with a list of members for the given partitioned data set (PDS or PDSE). If an error occurs, the response message contains its description.
    ///   - response: The JSON response from z/OS system with the result of the operation or an error description.
    /// - See Also: [List the members of a z/OS data set](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_GetListDataSetMembers.htm)
    public func listDsnMembers(
        datasetName: String,
        onCompletion: @escaping (_ response: String) -> Void
    ) {
        var customArgs = requestArguments
        customArgs.url = prepareUrl(path: "ds/" + datasetName + "/member")
        
        requestHandler.performRequest(.GET, customArgs) { response in
            onCompletion(response)
        }
    }
    
    /// Launches request to retrieve the contents of a sequential data set, or a member of a partitioned data set (PDS or PDSE) with the following HTTP method and URI path: GET /zosmf/restfiles/ds/<data_set_name>[(<member_name>)]
    /// - Parameters:
    ///   - datasetName: The name of a z/OS data set to be read or the name of partitioned data set (PDS or PDSE) and its member (in parentheses) to be read. The length of the data set name cannot exceed 44 characters.
    ///   - onCompletion: Closure with a JSON response from z/OS system with the contents of a sequential data set, or a member of a partitioned data set (PDS or PDSE). If an error occurs, the response message contains its description.
    ///   - response: The JSON response from z/OS system with the result of the operation or an error description.
    /// - See Also: [Retrieve the contents of a z/OS data set or member](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_GetReadDataSet.htm)
    public func getDsnContents(
        datasetName: String,
        onCompletion: @escaping (_ response: String) -> Void
    ) {
        var customArgs = requestArguments
        customArgs.url = prepareUrl(path: "ds/" + datasetName)
        
        requestHandler.performRequest(.GET, customArgs) { response in
            onCompletion(response)
        }
    }
    
    /// Launches request to write the contents to an existing sequential data set, or a member of a partitioned data set (PDS or PDSE) with the following HTTP method and URI path: PUT /zosmf/restfiles/ds/<data_set_name>[(<member_name>)]
    /// - Parameters:
    ///   - datasetName: The name of a z/OS data set to which to write or the name of partitioned data set (PDS or PDSE) and its member (in parentheses) to which to write. The length of the data set name cannot exceed 44 characters.
    ///   - contents: The contents to write to the target data set.
    ///   - onCompletion: Closure with a JSON response from z/OS system with the result of the operation. If an error occurs, the response message contains its description.
    ///   - response: The JSON response from z/OS system with the result of the operation or an error description.
    /// - See Also: [Write data to a z/OS data set or member](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_PutWriteDataSet.htm)
    public func writeToDsn(
        datasetName: String,
        contents: String,
        onCompletion: @escaping (_ response: String) -> Void
    ) {
        var customArgs = requestArguments
        customArgs.url = prepareUrl(path: "ds/" + datasetName)
        customArgs.headers["Content-Type"] = "text/plain; charset=UTF-8"
        customArgs.body = contents
        
        requestHandler.performRequest(.PUT, customArgs, onCompletion: { response in
            onCompletion(response)
        })
    }
    
    /// Launches request to delete sequential and partitioned data sets, or a member of a partitioned data set (PDS or PDSE) with the following HTTP method and URI path: DELETE /zosmf/restfiles/ds/<data_set_name>[(<member_name>)]
    /// - Parameters:
    ///   - datasetName: The name of a z/OS data set, that you are going to delete, or the name of a z/OS data set that contains a member you are going to delete, followed by the name of the partitioned data set member (in parentheses) to be deleted.
    ///   - onCompletion: Closure with a JSON response from z/OS system with the result of the operation. If an error occurs, the response message contains its description.
    ///   - response: The JSON response from z/OS system with the result of the operation or an error description.
    /// - See Also: [Delete a sequential and partitioned data set](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_DeleteDataSet.htm)
    /// - See Also: [Delete a partitioned data set member](https://www.ibm.com/support/knowledgecenter/SSLTBW_2.4.0/com.ibm.zos.v2r4.izua700/IZUHPINFO_API_DeletePartitionedDataSet.htm)
    public func deleteDsn(
        datasetName: String,
        onCompletion: @escaping (_ response: String) -> Void
    ) {
        var customArgs = requestArguments
        customArgs.url = prepareUrl(path: "ds/" + datasetName)
        
        requestHandler.performRequest(.DELETE, customArgs, onCompletion: { response in
            onCompletion(response)
        })
    }
    
    /// Prepares URL object and verifies its validity
    /// - Parameters:
    ///   - path: URL path component to append.
    ///   - queryItems: Optional parameter for URL query items to append if any.
    /// - Returns: Verified URL object to use for HTTP request.
    internal func prepareUrl(
        path: String,
        queryItems: [URLQueryItem]? = nil
    ) -> URL {
        var urlComponents = URLComponents()
        urlComponents.path = path
        urlComponents.queryItems = queryItems
        guard let verifiedUrl = urlComponents.url(relativeTo: requestArguments.url) else {
            fatalError(ZosmfError.invalidUrlAddress.errorDescription!)
        }
        return verifiedUrl
    }
}
