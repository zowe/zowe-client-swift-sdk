//
//  ZosmfApi.swift
//  Zowe SDK
//
//  This program and the accompanying materials are made available under the terms of the
//  Eclipse Public License v2.0 which accompanies this distribution, and is available at
//  https://www.eclipse.org/legal/epl-v20.html
//  SPDX-License-Identifier: EPL-2.0
//
//  Copyright Â© 2020 Contributors to the Zowe Project. All rights reserved.
//

import Foundation

/// z/OSMF API attributes class
public class ZosmfApi {
    
    // MARK: - ZosmfApi private members
    
    /// z/OSMF API connection object (generated by the ZoweSDK object)
    private let connection: ZosmfConnection
    
    /// z/OSMF URI path endpoint
    private let defaultServiceUrl: String

    /// z/OSMF HTTP request default headers
    private var defaultHeaders: Dictionary<String, String> {
        [
            "Authorization": "Basic " + encodedCredentials,
            "Content-type": "application/json; charset=UTF-8",
            "X-CSRF-ZOSMF-HEADER": "true"
        ]
    }
    
    /// Base64 encoded credentials in <mainframeId>:<password> format
    private var encodedCredentials: String {
        let credentials = connection.zosmfUser + ":" + connection.zosmfPassword
        let credentialsData = credentials.data(using: .utf8)
        let credentialsOptions = Data.Base64EncodingOptions(rawValue: 0)
        guard let credentialsEncoded = credentialsData?.base64EncodedString(options: credentialsOptions) else {
            fatalError(ZosmfError.base64EncodedString.errorDescription!)
        }
        
        return credentialsEncoded
    }
    
    /// z/OSMF full URL endpoint
    private var requestEndpoint: URL {
        let baseUrl = connection.zosmfHost
        let service =  defaultServiceUrl
        let url = "https://" + baseUrl + service
        guard let verifiedUrl = URL(string: url) else {
            fatalError(ZosmfError.invalidUrlAddress.errorDescription!)
        }
        
        return verifiedUrl
    }
    
    // MARK: - ZosmfApi internal fields
    
    /// HTTPS request default arguments
    internal var requestArguments: (url: URL, headers: Dictionary<String, String>) {
        (
            requestEndpoint,
            defaultHeaders
        )
    }
    
    /// Zowe SDK default session arguments
    internal var sessionArguments: (Double, Double) {
        (
            timeout: 30.0,
            timeoutForRequest: 60.0
        )
    }
    
    /// z/OSMF REST API HTTPS request object
    internal var requestHandler: ZosmfRequestHandler {
        ZosmfRequestHandler(connection, sessionArguments)
    }
    
    // MARK: - ZosmfApi constructor
    
    /// ZosmfApi object constructor
    /// - Parameters:
    ///   - connection: The z/OSMF connection object (generated by the ZoweSDK object)
    ///   - defaultUrl: The base default endpoint url used by the REST API
    internal init(
        _ connection: ZosmfConnection,
        _ defaultUrl: String
    ) {
        self.connection = connection
        self.defaultServiceUrl = defaultUrl
    }
}
